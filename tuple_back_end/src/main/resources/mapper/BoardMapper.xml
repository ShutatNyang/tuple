<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ssafy.board.model.mapper.BoardMapper">

	<resultMap id="board" type="com.ssafy.board.model.BoardDto">
		<id property="id" column="id" />
		<result property="memberId" column="member_id" />
		<result property="boardType" column="board_type" />
		<result property="registTime" column="regist_time" />
		<result property="likeCount" column="like_count" />
		<result property="dislikeCount" column="dislike_count" />
		<result property="title" column="title" />
		<result property="content" column="content" />
		<result property="deleteTime" column="delete_time" />
		<result property="updatedTime" column="updated_time" />
	</resultMap>

	<resultMap id="BoardListCategoryDto" type="com.ssafy.board.model.dto.response.BoardItemDto">
		<id property="id" column="id" />
		<result property="memberId" column="member_id" />
		<result property="email" column="email" />
		<result property="boardType" column="board_type" />
		<result property="registTime" column="regist_time" />
		<result property="likeCount" column="like_count" />
		<result property="dislikeCount" column="dislike_count" />
		<result property="title" column="title" />
		<result property="content" column="content" />
		<result property="deleteTime" column="delete_time" />
		<result property="updatedTime" column="updated_time" />
	</resultMap>


	<!-- 글 등록 -->
	<insert id="insert" useGeneratedKeys="true" keyProperty="id">
		insert into boards(board_type, title, member_id, content)
		values (#{boardType}, #{title}, #{memberId}, #{content})
	</insert>

	<!-- 글 삭제 -->
	<delete id="delete" parameterType="int">
		delete
		from boards
		where id = #{id}
	</delete>


	<!-- 글 수정 -->
	<update id="update" parameterType="com.ssafy.board.model.BoardDto">
		update
			boards
		set title = #{title},
			content = #{content}
		where id = #{id}
	</update>


	<!-- 글 전체 조회 -->
	<select id="lengthOfListAll" parameterType="string" resultType="int">
		select count(*)
		from boards
		where board_type = #{boardType};
	</select>


	<!-- 카테고리별 글 목록 조회 -->
	<select id="listByCategory" resultMap="BoardListCategoryDto">
		SELECT
		b.id,
		b.member_id,
		m.email,
		b.board_type,
		b.regist_time,
		b.like_count,
		b.dislike_count,
		b.title,
		b.content,
		b.delete_time,
		b.updated_time
		FROM boards b
		JOIN member m ON b.member_id = m.id
		WHERE b.board_type = #{boardType}
		ORDER BY b.regist_time DESC
		LIMIT #{size} OFFSET #{offset}
	</select>


	<!-- 글 상세 조회 -->
	<select id="detail" parameterType="int" resultMap="board">
		select *
		from boards
		where id = #{id}
	</select>

	<!-- 글 추천 수 증가 -->
	<update id="incrementRecommendCount" parameterType="int">
		UPDATE boards
		SET like_count = like_count + 1
		WHERE id = #{id}
	</update>

	<!-- 글 비추천 수 증가 -->
	<update id="incrementNotRecommendCount" parameterType="int">
		UPDATE boards
		SET dislike_count = dislike_count + 1
		WHERE id = #{id}
	</update>

	<!-- 글 추천/비추 중복 확인 테이블에 추가 -->
	<insert id="insertLikeDislike" parameterType="map">
		INSERT IGNORE INTO board_like_dislike (member_id, board_id, is_like, created_time)
    	VALUES (#{memberId}, #{boardId}, #{isLike}, CURRENT_TIMESTAMP)
	</insert>

	<!-- 글 추천/비추 중복 확인 테이블에서 삭제 -->
	<delete id="cancelLikeDislike" parameterType="map">
		DELETE from board_like_dislike
		where member_id = #{memberId} and board_id = #{boardId}
	</delete>

	<!-- 글 추천 수 감소 -->
	<update id="decrementRecommendCount" parameterType="int">
		UPDATE boards
		SET like_count = like_count - 1
		WHERE id = #{boardId}
	</update>

	<!-- 글 비추천 수 감소 -->
	<update id="decrementNotRecommendCount" parameterType="int">
		UPDATE boards
		SET dislike_count = dislike_count - 1
		WHERE id = #{boardId}
	</update>





	<!-- 회원의 아이디로 이메일 가져오기 -->
	<select id="getEmailByBoardMemberId" parameterType="int">
		select email
		from member
		where id = #{memberId}
	</select>

	<!-- 글 id로 회원 이메일 가져오기 -->
	<select id="getEmailByBoardId" parameterType="int">
		SELECT m.email AS member_email
		FROM boards b
		JOIN member m ON b.member_id = m.id
		WHERE b.id = #{id};
	</select>
	
	<select id="getMemberIdByEmail" parameterType="String">
		Select id
		from member
		where email = #{email}
	</select>

	<select id="getIsLike" parameterType="com.ssafy.board.model.dto.request.RecommendStatusRequestDto" resultType="int">
		SELECT
		CASE
		WHEN COUNT(*) = 0 THEN -1
		ELSE MAX(is_like)
		END AS is_like
		FROM board_like_dislike
		WHERE member_id = #{memberId} AND board_id = #{boardId}
	</select>
</mapper>
	